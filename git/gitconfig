####################################
# Global configuration file for Git.
####################################

# A lot of aliases to speed up full-time usage of Git from command line.
# Long flag names are used for readability wherever possible.
# Short flags are meant for writing on the command line.
[alias]
        # List Git aliases with definitions
        aliases = ! git config --get-regexp ^alias\\. | grep -v "^alias\\.aliases" | sed -e 's/^alias\\.//' -e 's/\\ /\\ =\\ /'
        
        # Shorthand for config
        # See`git help config` for config options
        cfg = config

        # Shorthand for global config
        cfgglobal = config --global

        h = help                                       # Shorthand for help

        # Staging
        a = add
        
        # Add all unstaged (including untracked) files.
        aa = add --all                                 # See`git help add`

        # Interactive add. Used for patching.
        # See`git help add`
        ai = add --interactive

        # Branch

        # Shorthand for branch
        b = branch
        
        branch-name = rev-parse --abbrev-ref HEAD
        branch-diff = diff master...HEAD
        branch-files = "!git diff master...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"

        # Delete a branch only if it is merged in the current branch.
        bd = branch --delete
        
        # Shorthand for branch --merged
        bm = branch --merged

        # Shorthand for browse
        # See`hub help browse`
        br = browse

        # Commit
        # See`git help commit`
        c = commit                               	 # Shorthand for commit
        ca = commit -a
        cm = commit -m                               # Commit with message
        cal = !git add -A && git commit              # Commit all changes
        cam = commit -am
        cne = commit --no-edit
        amend = commit --amend
        amend-all = !git add --all && git commit --amend --reuse-message=HEAD

        # Clone
        cl = clone
        sclone = clone --depth=1

        # Delete all untracked files and directories.
        # See`git help clean`
        cleanit = clean -fd

        # Checkout
        # See`git help checkout`
        ch = checkout                     # Shorthand for checkout
        cb = checkout -b
        chb = checkout -B                 # Checkout a branch. Create it if it doesn't exist

        # Cherry-pick
        cp = cherry-pick

        # Diff
        d = diff --color-words
        dc = diff --cached              # Diff staging area (a.k.a index) to HEAD (a.k.a last commit)

        # Show the diff between the latest commit and the current state
        df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

        # Merge
        m = merge
        mt = mergetool                  # Shorthand for mergetool
        nm = branch --no-merged         # Show the not merged branches compared to the current branch

        # Shorthand for fetch
        f = fetch
        
        # Pull
        #pl = pull                               # Found Better Method
        pl = pull --ff-only                     # Shorthand for pull
        plom = pull origin master
        plum = pull upstream master
        preb = !git fetch upstream && git rebase upstream/master

        # Push
        p = push
        pom = push origin master
        poh = push origin head
        pushf = push --force-with-lease         # Push force with a check if all the commits you are overriding on the remote
        
        # Stash
        st = stash
        stp = stash pop

        # Status/Logging
        s = status
        ss = status -sb
        hist = log --graph --pretty=custom                      # Show custom graph
        l = log --pretty=custom                                 # Show custom log
        ll = log --stat --abbrev-commit
        lg = log --abbrev-commit --abbrev=8 --graph             # Same as l, but with graph. Recursive/Break/Tab-Show
        local = log --abbrev-commit --abbrev=8 @{u}..           # Same as above, but list local commits not on
        mylog = !git log --author=\"$(git config user.name)\"   # Log commits authored by me($WHOAMI)
        shl = shortlog                                          # Shorthand for shortlog
        contributors = shortlog --summary --numbered            # List contributors
        

        # Reset
        rs = reset                                              # Shorthand for reset
        unstage = reset HEAD --                                 # Mixed reset (affects HEAD and Index)
        undo = reset --soft HEAD~1                              # Undo last commit (affects HEAD only)
        reset = reset --hard HEAD~1                             # Remove last commit (from HEAD, Index and Working Dir)

        # Remote
        #r = remote                                              # Found Better Method
        r = remote -v                                           # Shorthand for remote
        ru = remote update                                      # Update all remotes

        # Shorthand for show
        sh = show
        
        # Shorthand for tag
        t = tag
        
        # Submodules
        subpl = submodule update --init --recursive

        # Git flow
        new = !git pull origin develop && git flow feature start
        done = !git pull origin develop && git flow feature finish "$(git symbolic-ref --short HEAD | sed -n 's/^feature\\///p')"
        go = !git checkout $1 && pull
        master = !git checkout master && pull
        develop = !git checkout develop && pull
        mmm = !git fetch origin master && git rebase origin/master
        ddd = !git fetch origin develop && git rebase origin/develop

        # Misc
        # In case of fire
        # https://twitter.com/bozhobg/status/650265599671693312
        fire = "!git commit --all && git push --set-upstream origin HEAD && echo 'LEAVE BUILDING!!!'"

        publish = "!git push --set-upstream origin $(git branch-name)"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Find commits by source code

  cc = "!f() { \
      git log --pretty=custom --decorate --date=short -S\"$1\"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Find commits by commit message

  cm = "!f() { \
      git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Credit an author on the latest commit

  credit = "!f() { \
      if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
          git commit --amend --author \"$1 <$2>\" -C HEAD; \
      fi \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # List remote branches

  lrb = "!f() { \
      remote="${1:-origin}"; \
      git ls-remote --heads "$remote"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch

  mpr = "!f() { \
      declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
      declare branch=\"${2:-$currentBranch}\"; \
      if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
          git fetch origin refs/pull/$1/head:pr/$1 && \
          git checkout -B $branch && \
          git rebase $branch pr/$1 && \
          git checkout -B $branch && \
          git merge pr/$1 && \
          git branch -D pr/$1 && \
          git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
      fi \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name

  retag = "!f() { \
      git tag -d "$1" &> /dev/null; \
      git tag $1; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# So much color
[color]
        ui = always

[color "branch"]
        current = green bold
        local = green
        remote = yellow
        
        # Highlight current. Yellow local branches; Green remotes.
        #current = yellow reverse
        #local = yellow
        #remote = green

[color "diff"]
        frag = magenta
        meta = yellow
        new = green
        old = red

        # Yellow meta; Magenta line info; Red for deleltions; Green for additions.
        #meta = yellow
        #frag = magenta
        #old = red
        #new = green
        #whitespace = red reverse

[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = "red bold 52"
        newNormal = "green bold"
        newHighlight = "green bold 22"

[color "status"]
        added = green reverse
        changed = yellow reverse
        untracked = red reverse

        # Changed files are yellow.
        # Staged files are green.
        # New (untracked) files are cyan.
        # Headers are gray (white dimmed)
        # Branch is always green even in headers
        added = green
        branch = green
        changed = yellow
        header = white dim
        untracked = cyan

# Git mergetool
[merge]
        tool = opendiff
        keepBackup = false                  # No *.orig files left when using mergetool.
        
        # Include summaries of merged commits in newly created merge commit messages
        log = true

[core]
        # Default editor for commit messages and other inputs
        # Even when EDITOR is set to something else
        editor = nano

        abbrev = 12
        attributesfile = ~/.gitattributes   # Global `.gitattributes`
        excludesfile = ~/.gitignore         # Global `.gitignore`
        autocrlf = input
        mergeoptions = --no-edit
        ignorecase = false
        #trustctime = false                 # Make `git rebase` safer on OS X--FUCK BEING SAFE
[diff]

        # Detect copies as well as renames
        renames = copies

        # Use more time to create better diffs.
        # See "`git help diff` --patience" and "`git help merge` recursive".
        algorithm = patience

        # Use blank lines as a strong hint to identify the changes
        compactionHeuristic = true

[pager]
        # Insanely beautiful diffs ==> npm install -g diff-so-fancy
        diff = diff-so-fancy | less --tabs=4 -RFX
        show = diff-so-fancy | less --tabs=4 -RFX

[diff "bin"]
        # Use `hexdump` to diff binary files
        textconv = hexdump -v -C

[pretty]
        live = "format:%Cred%<(6)%h%Creset %<(50,trunc)%s%C(yellow)% D%Creset %gN"
        custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
        #                     │        │            │            │             └─ author name
        #                     │        │            │            └─ message
        #                     │        │            └─ date (relative)
        #                     │        └─ decorations (branch, heads or tags)
        #                     └─ hash (abbreviated)

[help]
        # Correct typos
        autocorrect = 1

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules

# Rewrites of repo paths
# [url "git@github.com:"]
#         insteadOf = "gh:"
#         insteadOf = "git://github.com"
#         pushInsteadOf = "github:"
#         pushInsteadOf = "git://github.com/"
#         pushInsteadOf = "https://github.com/"

# [url "git://github.com/"]
#         insteadOf = "github:"

# [url "git@gist.github.com:"]
#         insteadOf = "gst:"
#         pushInsteadOf = "gist:"
#         pushInsteadOf = "git://gist.github.com/"
#         pushInsteadOf = "https://gist.github.com/"

# [url "git://gist.github.com/"]
#         insteadOf = "gist:"

# Push easily http://stackoverflow.com/a/23918418/89484
[push]
        # Make `git push` automatically push relevant
        # annotated tags when pushing branches out
        followTags = true
        default = current

# Use separate file for username / github token / etc
[include]
        path = ~/.gitconfig.local

[filter "lfs"]
        clean = git lfs clean %f
        smudge = git lfs smudge %f
        required = true

[fetch]
        prune = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[user]
	email = indianvip60@gmail.com
	name = Anahit Sarao
